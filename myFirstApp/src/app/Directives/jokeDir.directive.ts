import { Directive, ElementRef, Renderer, HostListener } from '@angular/core';

// What's the use of a directive?

// There are 3 kinds of directives:
// 1. Components - directives with a template.
// 2. Structural directives - change the DOM layout by adding and removing DOM elements.
// 3. Attribute directives - change the appearance or behavior of an element, component, or another directive.

// Why do we use directive then?
// A directive is essentially a function executed when the Angular compiler finds its declaration in the DOM.
// The function can do almost anything, but as a common task, we can consider defining a behavior or
// executing a DOM transformation.

@Directive({
  selector: '[appJokeDir]'
})
export class JokeDirDirective {

  // This is the default constructor generated by the template
  // constructor() { }

  // Per suggestion by the book, Angular can use Dependency Injection to inject
  // an instance of something called ElementRef into the constructor
  constructor (private elm: ElementRef, private renderer: Renderer) {
    // ElementRef gives the constructor direct access to the DOM element upon which this Directive is attached
    // Angular uses Renderer to set properties of the element, and by providing it here, Angular can use Dependency Injection
    // to inject an instance of Renderer into the constructor.
    // Therefore, instead of directly changing the DOM, Angular does it through the Renderer

    // renderer.setElementStyle(elm.nativeElement, 'backgroundColor', 'gray');
  }

  @HostListener('mouseover') onmouseover() {
    const part = this.elm.nativeElement.querySelector('.directive-class');
    this.renderer.setElementStyle(part, 'display', 'block');
  }

  @HostListener('mouseout') onmouseout() {
    const part = this.elm.nativeElement.querySelector('.directive-class');
    this.renderer.setElementStyle(part, 'display', 'none');
  }
}
